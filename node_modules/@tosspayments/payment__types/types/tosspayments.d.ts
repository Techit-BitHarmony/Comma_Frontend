import BillingAuthRequest from './billing/BillingAuthRequest';
import { cancelPayment } from './payment/cancelPayment';
import { CardPaymentRequest, CardPaymentRequestWithoutUrl, CommonPaymentRequest, CommonPaymentRequestWithoutUrl, ForeignEasyPayPaymentRequest, ForeignEasyPayPaymentRequestWithoutUrl, PaymentMethodCode, PaymentMethodType, PaymentRequest, PaymentRequestWithoutUrl, PhonePaymentRequest, PhonePaymentRequestWithoutUrl, TranferPaymentRequest, TranferPaymentRequestWithoutUrl, VirtualAccountPaymentRequest, VirtualAccountPaymentRequestWithoutUrl } from './payment/PaymentRequest';
import { RequestPaymentResult } from './payment/requestPayment';
interface TossPaymentsOptions {
    clientUrl?: string;
    serverUrl?: string;
    pgWindowServerUrl?: string;
    gtid?: string;
    service?: string;
}
declare function TossPayments(clientKey: string, options?: TossPaymentsOptions): {
    readonly requestPayment: {
        (requestParams: CommonPaymentRequest): Promise<void>;
        (requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '카드' | 'CARD', requestParams: CardPaymentRequest): Promise<void>;
        (method: '카드' | 'CARD', requestParams: CardPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '가상계좌' | 'VIRTUAL_ACCOUNT', requestParams: VirtualAccountPaymentRequest): Promise<void>;
        (method: '가상계좌' | 'VIRTUAL_ACCOUNT', requestParams: VirtualAccountPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '휴대폰' | 'MOBILE_PHONE', requestParams: PhonePaymentRequest): Promise<void>;
        (method: '휴대폰' | 'MOBILE_PHONE', requestParams: PhonePaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '계좌이체' | 'TRANSFER', requestParams: TranferPaymentRequest): Promise<void>;
        (method: '계좌이체' | 'TRANSFER', requestParams: TranferPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '문화상품권' | 'CULTURE_GIFT_CERTIFICATE', requestParams: CommonPaymentRequest): Promise<void>;
        (method: '문화상품권' | 'CULTURE_GIFT_CERTIFICATE', requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '게임문화상품권' | 'GAME_GIFT_CERTIFICATE', requestParams: CommonPaymentRequest): Promise<void>;
        (method: '게임문화상품권' | 'GAME_GIFT_CERTIFICATE', requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '도서문화상품권' | 'BOOK_GIFT_CERTIFICATE', requestParams: CommonPaymentRequest): Promise<void>;
        (method: '도서문화상품권' | 'BOOK_GIFT_CERTIFICATE', requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: '해외간편결제' | 'FOREIGN_EASY_PAY', requestParams: ForeignEasyPayPaymentRequest): Promise<void>;
        (method: '해외간편결제' | 'FOREIGN_EASY_PAY', requestParams: ForeignEasyPayPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: PaymentMethodType | PaymentMethodCode, requestParams: PaymentRequest): Promise<void>;
        (method: PaymentMethodType | PaymentMethodCode, requestParams: PaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
    };
    readonly requestBillingAuth: (method: '카드', params: BillingAuthRequest) => Promise<import("./payment/openPaymentWindow").PaymentSuccessParams | undefined>;
    readonly cancelPayment: typeof cancelPayment;
};
declare namespace TossPayments {
    var __versionHash__: any;
}
export declare type TossPaymentsConstructor = typeof TossPayments;
export declare type TossPaymentsInstance = ReturnType<TossPaymentsConstructor>;
declare global {
    interface Window {
        TossPayments?: TossPaymentsConstructor;
    }
}
export default TossPayments;
