interface BaseEvent<EventType extends string = string, Params = unknown, Result = unknown> {
    type: EventType;
    params?: Params;
    result?: Result;
}
declare type EventMapType = Record<string | symbol | number, BaseEvent>;
import { CancelMessageData } from './event/cancel';
import { CommonParamsMessageData } from './event/commonParams';
import { CompleteMessageData } from './event/complete';
import { CustomerTokenMessageData } from './event/customerToken';
import { DisposeBridgeMessageData } from './event/disposeBridge';
import { InvokedMethodMessageData } from './event/invokedMethod';
import { KTAlphaShopOCRScanMessageData } from './event/kt-alpha-shop/ktAlphaShopOCRScan';
import { MountMessageData } from './event/mount';
import { GetShippingAddressWidgetEnabledMessageData } from './event/payment-widget/getShippingAddressWidgetEnabled';
import { SyncShippingAddressToBrandpayMessageData } from './event/payment-widget/syncShippingAddressToBrandpay';
import { PaymentMethodsMessageData } from './event/paymentMethods';
import { PaymentMethodTypeMessageData } from './event/paymentMethodType';
import { PaymentParamsMessageData } from './event/paymentParams';
import { PaymentResultMessageData } from './event/paymentResult';
import { RegisterResultMessageData } from './event/registerResult';
import { RegisterRoutePathMessageData } from './event/RegisterRoutePath';
import { RoutePathMessageData } from './event/routePath';
import { SafeAreaMessageData } from './event/safeArea';
import { SdkConfigMessageData } from './event/sdkConfig';
import { ServerUrlMessageData } from './event/serverUrl';
import { TermScopeMessageData } from './event/termScope';
import { ViewportMessageData } from './event/viewport';
import { WidgetMountMessageData } from './event/widget/mount';
import { OpenAddPaymentMethodMessageData } from './event/widget/openAddPaymentMethod';
import { OpenCashReceiptSettingMessageData } from './event/widget/openCashReceiptSetting';
import { OpenRegisterMessageData } from './event/widget/openRegister';
import { ResizeWidgetMessageData } from './event/widget/resizeWidget';
import { SyncStateMessageData } from './event/widget/syncState';
import { UpdateAmountMessageData } from './event/widget/updateAmount';
import { UpdateCashReceiptMessageData } from './event/widget/updateCashReceipt';
import { UpdatePaymentMethodMessageData } from './event/widget/updatePaymentMethod';
import { UpdateWidgetParamsMessageData } from './event/widget/updateWidgetParams';
import { WidgetParamsMethodMessageData } from './event/widget/widgetParams';
/**
 * @description
 * sdk와 brandpay가 port를 기반으로 통신하는 MessageEvent의 data 타입을 정의합니다.
 */
export interface BridgeMessageData extends EventMapType {
    COMMON_PARAMS: CommonParamsMessageData;
    VIEWPORT: ViewportMessageData;
    PAYMENT_PARAMS: PaymentParamsMessageData;
    METHOD_TYPE: PaymentMethodTypeMessageData;
    SAFE_AREA: SafeAreaMessageData;
    PAYMENT_RESULT: PaymentResultMessageData;
    INVOKED_METHOD: InvokedMethodMessageData;
    ROUTE_PATH: RoutePathMessageData;
    CUSTOMER_TOKEN: CustomerTokenMessageData;
    PAYMENT_METHODS: PaymentMethodsMessageData;
    COMPLETE: CompleteMessageData;
    CANCEL: CancelMessageData;
    REGISTER_RESULT: RegisterResultMessageData;
    TERM_SCOPE: TermScopeMessageData;
    SERVER_URL: ServerUrlMessageData;
    DISPOSE_BRIDGE: DisposeBridgeMessageData;
    REGISTER_ROUTE_PATH: RegisterRoutePathMessageData;
    SDK_CONFIG: SdkConfigMessageData;
    KT_ALPHA_SHOP_OCR_SCAN: KTAlphaShopOCRScanMessageData;
    MOUNT: MountMessageData;
}
export interface WidgetMessageData extends EventMapType {
    OPEN_CASH_RECEIPT_SETTING: OpenCashReceiptSettingMessageData;
    OPEN_ADD_PAYMENT_METHOD: OpenAddPaymentMethodMessageData;
    WIDGET_PARAMS: WidgetParamsMethodMessageData;
    COMMON_PARAMS: CommonParamsMessageData;
    VIEWPORT: ViewportMessageData;
    SAFE_AREA: SafeAreaMessageData;
    INVOKED_METHOD: InvokedMethodMessageData;
    RESIZE_WIDGET: ResizeWidgetMessageData;
    UPDATE_PAYMENT_METHOD: UpdatePaymentMethodMessageData;
    SYNC_STATE: SyncStateMessageData;
    UPDATE_CASH_RECEIPT: UpdateCashReceiptMessageData;
    SERVER_URL: ServerUrlMessageData;
    UPDATE_WIDGET_PARAMS: UpdateWidgetParamsMessageData;
    UPDATE_AMOUNT: UpdateAmountMessageData;
    DISPOSE_BRIDGE: DisposeBridgeMessageData;
    OPEN_REGISTER: OpenRegisterMessageData;
    CUSTOMER_TOKEN: CustomerTokenMessageData;
    SDK_CONFIG: SdkConfigMessageData;
    MOUNT: WidgetMountMessageData;
}
export interface PaymentWidgetMessageData extends EventMapType {
    SYNC_SHIPPING_ADDRESS_TO_BRANDPAY: SyncShippingAddressToBrandpayMessageData;
    GET_SHIPPING_ADDRESS_WIDGET_ENABLED: GetShippingAddressWidgetEnabledMessageData;
}
export declare const MessageType: {
    readonly COMMON_PARAMS: "COMMON_PARAMS";
    readonly PAYMENT_PARAMS: "PAYMENT_PARAMS";
    readonly METHOD_TYPE: "METHOD_TYPE";
    readonly SAFE_AREA: "SAFE_AREA";
    readonly VIEWPORT: "VIEWPORT";
    readonly PAYMENT_RESULT: "PAYMENT_RESULT";
    readonly INVOKED_METHOD: "INVOKED_METHOD";
    readonly ROUTE_PATH: "ROUTE_PATH";
    readonly CUSTOMER_TOKEN: "CUSTOMER_TOKEN";
    readonly PAYMENT_METHODS: "PAYMENT_METHODS";
    readonly COMPLETE: "COMPLETE";
    readonly CANCEL: "CANCEL";
    readonly REGISTER_RESULT: "REGISTER_RESULT";
    readonly TERM_SCOPE: "TERM_SCOPE";
    readonly SERVER_URL: "SERVER_URL";
    readonly DISPOSE_BRIDGE: "DISPOSE_BRIDGE";
    readonly REGISTER_ROUTE_PATH: "REGISTER_ROUTE_PATH";
    readonly SDK_CONFIG: "SDK_CONFIG";
    readonly KT_ALPHA_SHOP_OCR_SCAN: "KT_ALPHA_SHOP_OCR_SCAN";
    readonly MOUNT: "MOUNT";
};
export declare const WidgetMessageType: {
    readonly OPEN_CASH_RECEIPT_SETTING: "OPEN_CASH_RECEIPT_SETTING";
    readonly OPEN_ADD_PAYMENT_METHOD: "OPEN_ADD_PAYMENT_METHOD";
    readonly WIDGET_PARAMS: "WIDGET_PARAMS";
    readonly COMMON_PARAMS: "COMMON_PARAMS";
    readonly VIEWPORT: "VIEWPORT";
    readonly SAFE_AREA: "SAFE_AREA";
    readonly INVOKED_METHOD: "INVOKED_METHOD";
    readonly RESIZE_WIDGET: "RESIZE_WIDGET";
    readonly UPDATE_PAYMENT_METHOD: "UPDATE_PAYMENT_METHOD";
    readonly SYNC_STATE: "SYNC_STATE";
    readonly UPDATE_CASH_RECEIPT: "UPDATE_CASH_RECEIPT";
    readonly UPDATE_WIDGET_PARAMS: "UPDATE_WIDGET_PARAMS";
    readonly SERVER_URL: "SERVER_URL";
    readonly UPDATE_AMOUNT: "UPDATE_AMOUNT";
    readonly DISPOSE_BRIDGE: "DISPOSE_BRIDGE";
    readonly OPEN_REGISTER: "OPEN_REGISTER";
    readonly CUSTOMER_TOKEN: "CUSTOMER_TOKEN";
    readonly SDK_CONFIG: "SDK_CONFIG";
    readonly MOUNT: "MOUNT";
};
export declare const PaymentWidgetMessageType: {
    readonly SYNC_SHIPPING_ADDRESS_TO_BRANDPAY: "SYNC_SHIPPING_ADDRESS_TO_BRANDPAY";
    readonly GET_SHIPPING_ADDRESS_WIDGET_ENABLED: "GET_SHIPPING_ADDRESS_WIDGET_ENABLED";
};
export declare type MessageType = typeof MessageType[keyof typeof MessageType];
export {};
