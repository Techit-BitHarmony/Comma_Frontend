import {
  writable
} from "./chunk-AI2YIOQA.js";
import {
  cubicInOut
} from "./chunk-KTY6HHPQ.js";
import {
  createEventDispatcher
} from "./chunk-4L6SZYC3.js";
import {
  append_styles,
  attr,
  bind_this,
  bubble_event,
  child,
  child_frag,
  class_name,
  class_toggle,
  close,
  close_frag,
  comment,
  each_indexed,
  event,
  get,
  if_block,
  mutable_source,
  mutate,
  open,
  open_frag,
  pop,
  pre_effect,
  prop,
  push,
  readonly,
  remove_input_attr_defaults,
  render_effect,
  select_option,
  selected,
  set,
  sibling,
  store_get,
  store_set,
  stringify,
  style,
  template,
  text,
  text_effect,
  transition,
  unsubscribe_on_destroy,
  untrack,
  unwrap,
  validate_component,
  validate_store
} from "./chunk-EQU7X32J.js";
import "./chunk-IP2U24VQ.js";
import "./chunk-QKOF6TZO.js";
import "./chunk-GJGEBAQ3.js";
import {
  fly
} from "./chunk-DUFI2LGO.js";
import "./chunk-M2S2ZJJH.js";
import "./chunk-LZRLRPEA.js";

// node_modules/date-picker-svelte/dist/TimePicker.svelte
var frag_3 = template(`.<span role="spinbutton" aria-label="Milliseconds" tabindex="0" contenteditable="" class="svelte-jnfsem"> </span>`, true);
var frag_2 = template(`:<span role="spinbutton" aria-label="Seconds" tabindex="0" contenteditable="" class="svelte-jnfsem"> </span> <!>`, true);
var frag_1 = template(`<div class="time-picker svelte-jnfsem" role="none"><span role="spinbutton" aria-label="Hours" tabindex="0" contenteditable="" class="svelte-jnfsem"> </span>: <span role="spinbutton" aria-label="Minutes" tabindex="0" contenteditable="" class="svelte-jnfsem"> </span> <!></div>`);
function TimePicker($$anchor, $$props) {
  if (new.target === TimePicker)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let fields = mutable_source([]);
  function select(node) {
    const selection = window.getSelection();
    const range = document.createRange();
    range.selectNodeContents(node);
    selection == null ? void 0 : selection.removeAllRanges();
    selection == null ? void 0 : selection.addRange(range);
  }
  function keydown(e) {
    if (e.key === "ArrowUp" || e.key === "ArrowDown") {
      const value = get_value(e.currentTarget);
      const delta = e.key === "ArrowUp" ? 1 : -1;
      set_value(e.currentTarget, value + delta, true);
      e.preventDefault();
    } else if (e.key === "ArrowLeft" || e.key === "ArrowRight" || ":;-,.".includes(e.key)) {
      const field_index = get(fields).indexOf(e.currentTarget);
      const delta = e.key === "ArrowLeft" ? -1 : 1;
      const el = get(fields)[field_index + delta];
      if (field_index >= 0 && el) {
        el.focus();
        return;
      }
      e.preventDefault();
    }
    select(e.currentTarget);
  }
  function get_value(node) {
    const label = get_field(node).label;
    if (label === "Hours") {
      return $$props.browseDate.getHours();
    } else if (label === "Minutes") {
      return $$props.browseDate.getMinutes();
    } else if (label === "Seconds") {
      return $$props.browseDate.getSeconds();
    } else {
      return $$props.browseDate.getMilliseconds();
    }
  }
  function clamp(value, max, loop_around) {
    if (loop_around && value < 0) {
      return max;
    } else if (loop_around && value > max) {
      return 0;
    } else {
      return Math.max(0, Math.min(max, value));
    }
  }
  function get_field(element) {
    const label = element.getAttribute("aria-label");
    if (label === "Hours") {
      return { label, len: 2, max: 23 };
    } else if (label === "Minutes") {
      return { label, len: 2, max: 59 };
    } else if (label === "Seconds") {
      return { label, len: 2, max: 59 };
    } else {
      return { label, len: 3, max: 999 };
    }
  }
  function set_value(node, value, loop_around = false) {
    const field = get_field(node);
    value = clamp(value, field.max, loop_around);
    if (field.label === "Hours") {
      $$props.browseDate.setHours(value);
    } else if (field.label === "Minutes") {
      $$props.browseDate.setMinutes(value);
    } else if (field.label === "Seconds") {
      $$props.browseDate.setSeconds(value);
    } else if (field.label === "Milliseconds") {
      $$props.browseDate.setMilliseconds(value);
    } else {
      throw new Error("Invalid label " + field.label);
    }
    const length = field.label === "Milliseconds" ? 3 : 2;
    const text_value = ("000" + value).slice(-length);
    if (text_value !== node.innerText) {
      node.innerText = text_value;
    }
    $$props.browse($$props.browseDate);
  }
  function parse2(text2, length) {
    return parseInt(text2.replace(/[^\d]/g, "").slice(-length));
  }
  function input(e_unknown) {
    const e = e_unknown;
    const field = get_field(e.currentTarget);
    let new_value;
    if (e.inputType === "insertText") {
      const original_text = "000" + get_value(e.currentTarget);
      new_value = parse2(original_text + e.currentTarget.innerText, field.len);
      if (new_value > field.max && e.data) {
        new_value = parse2(e.data, field.len);
      }
    } else {
      new_value = parse2("000" + e.currentTarget.innerText, field.len);
    }
    set_value(e.currentTarget, new_value);
    select(e.currentTarget);
  }
  function focus(e) {
    select(e.currentTarget);
  }
  var fragment = comment($$anchor);
  var node_1 = child_frag(fragment);
  if_block(
    node_1,
    () => $$props.timePrecision,
    ($$anchor2) => {
      var div = open($$anchor2, true, frag_1);
      var span = child(div);
      bind_this(span, ($$value) => mutate(fields, get(fields)[0] = $$value));
      var text_1 = child(span);
      var span_1 = sibling(sibling(span, true));
      bind_this(span_1, ($$value) => mutate(fields, get(fields)[1] = $$value));
      var text_2 = child(span_1);
      var node_2 = sibling(sibling(span_1, true));
      text_effect(text_1, () => ("00" + $$props.browseDate.getHours()).slice(-2));
      text_effect(text_2, () => ("00" + $$props.browseDate.getMinutes()).slice(-2));
      event(
        "mousedown",
        div,
        (e) => {
          if (e.target instanceof HTMLElement && e.target.tagName === "SPAN") {
            e.target.focus();
            e.preventDefault();
          }
        },
        false
      );
      event("keydown", span, keydown, false);
      event("input", span, input, false);
      event("focus", span, focus, false);
      event("keydown", span_1, keydown, false);
      event("input", span_1, input, false);
      event("focus", span_1, focus, false);
      if_block(
        node_2,
        () => $$props.timePrecision !== "minute",
        ($$anchor3) => {
          var fragment_1 = open_frag($$anchor3, true, frag_2);
          var span_2 = sibling(child_frag(fragment_1, true));
          bind_this(span_2, ($$value) => mutate(fields, get(fields)[2] = $$value));
          var text_3 = child(span_2);
          var node_3 = sibling(sibling(span_2, true));
          text_effect(text_3, () => ("00" + $$props.browseDate.getSeconds()).slice(-2));
          event("keydown", span_2, keydown, false);
          event("input", span_2, input, false);
          event("focus", span_2, focus, false);
          if_block(
            node_3,
            () => $$props.timePrecision !== "second",
            ($$anchor4) => {
              var fragment_2 = open_frag($$anchor4, true, frag_3);
              var span_3 = sibling(child_frag(fragment_2, true));
              bind_this(span_3, ($$value) => mutate(fields, get(fields)[3] = $$value));
              var text_4 = child(span_3);
              text_effect(text_4, () => ("000" + $$props.browseDate.getMilliseconds()).slice(-3));
              event("keydown", span_3, keydown, false);
              event("input", span_3, input, false);
              event("focus", span_3, focus, false);
              close_frag($$anchor4, fragment_2);
            },
            null
          );
          close_frag($$anchor3, fragment_1);
        },
        null
      );
      close($$anchor2, div);
    },
    null
  );
  close_frag($$anchor, fragment);
  pop();
  append_styles($$anchor, "svelte-jnfsem", ".time-picker.svelte-jnfsem {\n  font-size: 1.1em;\n  display: flex;\n  align-items: center;\n  width: -moz-fit-content;\n  width: fit-content;\n  border: 1px solid rgba(108, 120, 147, 0.3);\n  border-radius: 3px;\n  margin: auto;\n  font-variant-numeric: tabular-nums;\n  margin-top: 6px;\n}\n\nspan.svelte-jnfsem {\n  -webkit-user-select: all;\n     -moz-user-select: all;\n          user-select: all;\n  outline: none;\n  position: relative;\n  z-index: 1;\n  padding: 4px 0px;\n}\nspan.svelte-jnfsem:first-child {\n  padding-left: 6px;\n}\nspan.svelte-jnfsem:last-child {\n  padding-right: 6px;\n}\n");
}

// node_modules/date-picker-svelte/dist/date-utils.js
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function getMonthLength(year, month) {
  const feb = isLeapYear(year) ? 29 : 28;
  const monthLengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  return monthLengths[month];
}
function toText(date, formatTokens) {
  let text2 = "";
  if (date) {
    for (const token of formatTokens) {
      if (typeof token === "string") {
        text2 += token;
      } else {
        text2 += token.toString(date);
      }
    }
  }
  return text2;
}
function getMonthDays(year, month) {
  const monthLength = getMonthLength(year, month);
  const days = [];
  for (let i = 0; i < monthLength; i++) {
    days.push({
      year,
      month,
      number: i + 1
    });
  }
  return days;
}
function getCalendarDays(value, weekStartsOn) {
  const year = value.getFullYear();
  const month = value.getMonth();
  const firstWeekday = new Date(year, month, 1).getDay();
  let days = [];
  const daysBefore = (firstWeekday - weekStartsOn + 7) % 7;
  if (daysBefore > 0) {
    let lastMonth = month - 1;
    let lastMonthYear = year;
    if (lastMonth === -1) {
      lastMonth = 11;
      lastMonthYear = year - 1;
    }
    days = getMonthDays(lastMonthYear, lastMonth).slice(-daysBefore);
  }
  days = days.concat(getMonthDays(year, month));
  let nextMonth = month + 1;
  let nextMonthYear = year;
  if (nextMonth === 12) {
    nextMonth = 0;
    nextMonthYear = year + 1;
  }
  const daysAfter = 42 - days.length;
  days = days.concat(getMonthDays(nextMonthYear, nextMonth).slice(0, daysAfter));
  return days;
}

// node_modules/date-picker-svelte/dist/locale.js
function getLocaleDefaults() {
  return {
    weekdays: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    months: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    weekStartsOn: 1
  };
}
function getInnerLocale(locale = {}) {
  const innerLocale = getLocaleDefaults();
  if (typeof locale.weekStartsOn === "number") {
    innerLocale.weekStartsOn = locale.weekStartsOn;
  }
  if (locale.months)
    innerLocale.months = locale.months;
  if (locale.weekdays)
    innerLocale.weekdays = locale.weekdays;
  return innerLocale;
}
function localeFromDateFnsLocale(dateFnsLocale) {
  var _a;
  const locale = getLocaleDefaults();
  if (typeof ((_a = dateFnsLocale == null ? void 0 : dateFnsLocale.options) == null ? void 0 : _a.weekStartsOn) === "number") {
    locale.weekStartsOn = dateFnsLocale.options.weekStartsOn;
  }
  if (dateFnsLocale.localize) {
    for (let i = 0; i < 7; i++) {
      locale.weekdays[i] = dateFnsLocale.localize.day(i, { width: "short" });
    }
    for (let i = 0; i < 12; i++) {
      locale.months[i] = dateFnsLocale.localize.month(i, { width: "wide" });
    }
  }
  return locale;
}

// node_modules/date-picker-svelte/dist/DatePicker.svelte
var each_block = template(`<option> </option>`);
var each_block_1 = template(`<option> </option>`);
var each_block_2 = template(`<option> </option>`);
var each_block_3 = template(`<option> </option>`);
var frag_12 = template(`<div class="header-cell svelte-168g93v"> </div>`);
var frag_22 = template(`<div class="header-cell svelte-168g93v"> </div>`);
var each_block_6 = template(`<div class="cell svelte-168g93v"><span class="svelte-168g93v"> </span></div>`);
var each_block_5 = template(`<div class="week svelte-168g93v"></div>`);
var frag = template(`<div class="date-time-picker svelte-168g93v" tabindex="0"><div class="tab-container svelte-168g93v" tabindex="-1"><div class="top svelte-168g93v"><button type="button" class="page-button svelte-168g93v" tabindex="-1"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="svelte-168g93v"><path d="M5 3l3.057-3 11.943 12-11.943 12-3.057-3 9-9z" transform="rotate(180, 12, 12)"></path></svg></button> <div class="dropdown month svelte-168g93v"><select class="svelte-168g93v"></select> <select class="dummy-select svelte-168g93v" tabindex="-1"></select> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="svelte-168g93v"><path d="M6 0l12 12-12 12z" transform="rotate(90, 12, 12)"></path></svg></div> <div class="dropdown year svelte-168g93v"><select class="svelte-168g93v"></select> <select class="dummy-select svelte-168g93v" tabindex="-1"></select> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="svelte-168g93v"><path d="M6 0l12 12-12 12z" transform="rotate(90, 12, 12)"></path></svg></div> <button type="button" class="page-button svelte-168g93v" tabindex="-1"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="svelte-168g93v"><path d="M5 3l3.057-3 11.943 12-11.943 12-3.057-3 9-9z"></path></svg></button></div> <div class="header svelte-168g93v"></div> <!> <!></div></div>`);
function DatePicker($$anchor, $$props) {
  if (new.target === DatePicker)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const iLocale = mutable_source();
  const browseYear = mutable_source();
  const browseMonth = mutable_source();
  const calendarDays = mutable_source();
  const dispatch = createEventDispatcher();
  function cloneDate(d) {
    return new Date(d.getTime());
  }
  let value = prop($$props, "value", 4, null);
  function setValue(d) {
    var _a;
    if (d.getTime() !== ((_a = value()) == null ? void 0 : _a.getTime())) {
      set(browseDate, clamp(d, min(), max()));
      value(cloneDate(get(browseDate)));
    }
  }
  function browse(d) {
    set(browseDate, clamp(d, min(), max()));
    if (!browseWithoutSelecting() && value()) {
      setValue(get(browseDate));
    }
  }
  const todayDate = /* @__PURE__ */ new Date();
  const defaultDate = /* @__PURE__ */ new Date();
  let timePrecision = prop($$props, "timePrecision", 0, null);
  let min = prop($$props, "min", 8, () => new Date(defaultDate.getFullYear() - 20, 0, 1));
  let max = prop($$props, "max", 8, () => new Date(defaultDate.getFullYear(), 11, 31, 23, 59, 59, 999));
  function clamp(d, min2, max2) {
    if (d > max2) {
      return cloneDate(max2);
    } else if (d < min2) {
      return cloneDate(min2);
    } else {
      return cloneDate(d);
    }
  }
  let browseDate = mutable_source(value() ? cloneDate(value()) : cloneDate(clamp(defaultDate, min(), max())));
  function setBrowseDate(value2) {
    if (get(browseDate).getTime() !== (value2 == null ? void 0 : value2.getTime())) {
      set(browseDate, value2 ? cloneDate(value2) : get(browseDate));
    }
  }
  let years = mutable_source(getYears(min(), max()));
  function getYears(min2, max2) {
    let years2 = [];
    for (let i = min2.getFullYear(); i <= max2.getFullYear(); i++) {
      years2.push(i);
    }
    return years2;
  }
  let locale = prop($$props, "locale", 8, () => ({}));
  let browseWithoutSelecting = prop($$props, "browseWithoutSelecting", 0, false);
  function setYear(newYear) {
    get(browseDate).setFullYear(newYear);
    browse(get(browseDate));
  }
  function setMonth(newMonth) {
    let newYear = get(browseDate).getFullYear();
    if (newMonth === 12) {
      newMonth = 0;
      newYear++;
    } else if (newMonth === -1) {
      newMonth = 11;
      newYear--;
    }
    const maxDate = getMonthLength(newYear, newMonth);
    const newDate = Math.min(get(browseDate).getDate(), maxDate);
    browse(new Date(newYear, newMonth, newDate, get(browseDate).getHours(), get(browseDate).getMinutes(), get(browseDate).getSeconds(), get(browseDate).getMilliseconds()));
  }
  function selectDay(calendarDay) {
    if (dayIsInRange(calendarDay, min(), max())) {
      get(browseDate).setFullYear(0);
      get(browseDate).setMonth(0);
      get(browseDate).setDate(1);
      get(browseDate).setFullYear(calendarDay.year);
      get(browseDate).setMonth(calendarDay.month);
      get(browseDate).setDate(calendarDay.number);
      setValue(get(browseDate));
      dispatch("select", cloneDate(get(browseDate)));
    }
  }
  function dayIsInRange(calendarDay, min2, max2) {
    const date = new Date(calendarDay.year, calendarDay.month, calendarDay.number);
    const minDate = new Date(min2.getFullYear(), min2.getMonth(), min2.getDate());
    const maxDate = new Date(max2.getFullYear(), max2.getMonth(), max2.getDate());
    return date >= minDate && date <= maxDate;
  }
  function shiftKeydown(e) {
    if (e.shiftKey && e.key === "ArrowUp") {
      setYear(get(browseDate).getFullYear() - 1);
    } else if (e.shiftKey && e.key === "ArrowDown") {
      setYear(get(browseDate).getFullYear() + 1);
    } else if (e.shiftKey && e.key === "ArrowLeft") {
      setMonth(get(browseDate).getMonth() - 1);
    } else if (e.shiftKey && e.key === "ArrowRight") {
      setMonth(get(browseDate).getMonth() + 1);
    } else {
      return false;
    }
    e.preventDefault();
    return true;
  }
  function yearKeydown(e) {
    let shift = e.shiftKey || e.altKey;
    if (shift) {
      shiftKeydown(e);
      return;
    } else if (e.key === "ArrowUp") {
      setYear(get(browseDate).getFullYear() - 1);
    } else if (e.key === "ArrowDown") {
      setYear(get(browseDate).getFullYear() + 1);
    } else if (e.key === "ArrowLeft") {
      setMonth(get(browseDate).getMonth() - 1);
    } else if (e.key === "ArrowRight") {
      setMonth(get(browseDate).getMonth() + 1);
    } else {
      shiftKeydown(e);
      return;
    }
    e.preventDefault();
  }
  function monthKeydown(e) {
    let shift = e.shiftKey || e.altKey;
    if (shift) {
      shiftKeydown(e);
      return;
    } else if (e.key === "ArrowUp" || e.key === "ArrowLeft") {
      setMonth(get(browseDate).getMonth() - 1);
    } else if (e.key === "ArrowDown" || e.key === "ArrowRight") {
      setMonth(get(browseDate).getMonth() + 1);
    } else {
      shiftKeydown(e);
      return;
    }
    e.preventDefault();
  }
  function keydown(e) {
    var _a, _b;
    let shift = e.shiftKey || e.altKey;
    if (((_a = e.target) == null ? void 0 : _a.tagName) === "SELECT" || ((_b = e.target) == null ? void 0 : _b.tagName) === "SPAN") {
      return;
    }
    if (shift) {
      shiftKeydown(e);
      return;
    } else if (e.key === "ArrowUp") {
      get(browseDate).setDate(get(browseDate).getDate() - 7);
      setValue(get(browseDate));
    } else if (e.key === "ArrowDown") {
      get(browseDate).setDate(get(browseDate).getDate() + 7);
      setValue(get(browseDate));
    } else if (e.key === "ArrowLeft") {
      get(browseDate).setDate(get(browseDate).getDate() - 1);
      setValue(get(browseDate));
    } else if (e.key === "ArrowRight") {
      get(browseDate).setDate(get(browseDate).getDate() + 1);
      setValue(get(browseDate));
    } else if (e.key === "Enter") {
      setValue(get(browseDate));
      dispatch("select", cloneDate(get(browseDate)));
    } else {
      return;
    }
    e.preventDefault();
  }
  pre_effect(() => {
    value(), max(), min();
    untrack(() => {
      if (value() && value() > max()) {
        setValue(max());
      } else if (value() && value() < min()) {
        setValue(min());
      }
    });
  });
  pre_effect(() => {
    value();
    untrack(() => {
      setBrowseDate(value());
    });
  });
  pre_effect(() => {
    min(), max();
    untrack(() => {
      set(years, getYears(min(), max()));
    });
  });
  pre_effect(() => {
    locale();
    untrack(() => {
      set(iLocale, getInnerLocale(locale()));
    });
  });
  pre_effect(() => {
    get(browseDate);
    untrack(() => {
      set(browseYear, get(browseDate).getFullYear());
    });
  });
  pre_effect(() => {
    get(browseDate);
    untrack(() => {
      set(browseMonth, get(browseDate).getMonth());
    });
  });
  pre_effect(() => {
    get(browseDate), get(iLocale);
    untrack(() => {
      set(calendarDays, getCalendarDays(get(browseDate), get(iLocale).weekStartsOn));
    });
  });
  var div = open($$anchor, true, frag);
  var div_1 = child(div);
  var div_2 = child(div_1);
  var button = child(div_2);
  var svg = child(button);
  var path = child(svg);
  var div_3 = sibling(sibling(button, true));
  var select = child(div_3);
  remove_input_attr_defaults(select);
  var select_1 = sibling(sibling(select, true));
  var svg_1 = sibling(sibling(select_1, true));
  var path_1 = child(svg_1);
  var div_4 = sibling(sibling(div_3, true));
  var select_2 = child(div_4);
  remove_input_attr_defaults(select_2);
  var select_3 = sibling(sibling(select_2, true));
  var svg_2 = sibling(sibling(select_3, true));
  var path_2 = child(svg_2);
  var button_1 = sibling(sibling(div_4, true));
  var svg_3 = child(button_1);
  var path_3 = child(svg_3);
  var div_5 = sibling(sibling(div_2, true));
  var node_1 = sibling(sibling(div_5, true));
  var node_2 = sibling(sibling(node_1, true));
  var select_value;
  var select_2_value;
  render_effect(() => {
    if (select_value !== (select_value = get(browseMonth))) {
      select.value = null == (select.__value = get(browseMonth)) ? "" : get(browseMonth), select_option(select, get(browseMonth));
    }
    if (select_2_value !== (select_2_value = get(browseYear))) {
      select_2.value = null == (select_2.__value = get(browseYear)) ? "" : get(browseYear), select_option(select_2, get(browseYear));
    }
  });
  event("focusout", div, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", div, keydown, false);
  event("click", button, () => setMonth(get(browseDate).getMonth() - 1), false);
  event("keydown", select, monthKeydown, false);
  event("input", select, (e) => setMonth(parseInt(e.currentTarget.value)), false);
  each_indexed(
    select,
    () => get(iLocale).months,
    9,
    ($$anchor2, monthName, i) => {
      var option = open($$anchor2, true, each_block);
      option.value = null == (option.__value = unwrap(i)) ? "" : unwrap(i), selected(option);
      var text2 = child(option);
      var option_disabled;
      render_effect(() => {
        if (option_disabled !== (option_disabled = new Date(get(browseYear), unwrap(i), getMonthLength(get(browseYear), unwrap(i)), 23, 59, 59, 999) < min() || new Date(get(browseYear), unwrap(i)) > max())) {
          option.disabled = option_disabled;
        }
        text(text2, unwrap(monthName));
      });
      close($$anchor2, option);
    },
    null
  );
  each_indexed(
    select_1,
    () => get(iLocale).months,
    9,
    ($$anchor2, monthName, i) => {
      var option_1 = open($$anchor2, true, each_block_1);
      option_1.value = null == (option_1.__value = unwrap(i)) ? "" : unwrap(i), selected(option_1);
      var text_1 = child(option_1);
      var option_1_selected;
      render_effect(() => {
        if (option_1_selected !== (option_1_selected = unwrap(i) === get(browseMonth))) {
          option_1.selected = option_1_selected;
        }
        text(text_1, unwrap(monthName));
      });
      close($$anchor2, option_1);
    },
    null
  );
  event("input", select_2, (e) => setYear(parseInt(e.currentTarget.value)), false);
  event("keydown", select_2, yearKeydown, false);
  each_indexed(
    select_2,
    () => get(years),
    9,
    ($$anchor2, v, $$index_2) => {
      var option_2 = open($$anchor2, true, each_block_2);
      var text_2 = child(option_2);
      var option_2_value;
      render_effect(() => {
        if (option_2_value !== (option_2_value = unwrap(v))) {
          option_2.value = null == (option_2.__value = unwrap(v)) ? "" : unwrap(v), selected(option_2);
        }
        text(text_2, unwrap(v));
      });
      close($$anchor2, option_2);
    },
    null
  );
  each_indexed(
    select_3,
    () => get(years),
    9,
    ($$anchor2, v, $$index_3) => {
      var option_3 = open($$anchor2, true, each_block_3);
      var text_3 = child(option_3);
      var option_3_value;
      var option_3_selected;
      render_effect(() => {
        if (option_3_value !== (option_3_value = unwrap(v))) {
          option_3.value = null == (option_3.__value = unwrap(v)) ? "" : unwrap(v), selected(option_3);
        }
        if (option_3_selected !== (option_3_selected = unwrap(v) === get(browseDate).getFullYear())) {
          option_3.selected = option_3_selected;
        }
        text(text_3, unwrap(v));
      });
      close($$anchor2, option_3);
    },
    null
  );
  event("click", button_1, () => setMonth(get(browseDate).getMonth() + 1), false);
  each_indexed(
    div_5,
    () => Array(7),
    9,
    ($$anchor2, _, i) => {
      var fragment = comment($$anchor2);
      var node = child_frag(fragment);
      if_block(
        node,
        () => unwrap(i) + get(iLocale).weekStartsOn < 7,
        ($$anchor3) => {
          var div_6 = open($$anchor3, true, frag_12);
          var text_4 = child(div_6);
          text_effect(text_4, () => get(iLocale).weekdays[get(iLocale).weekStartsOn + unwrap(i)]);
          close($$anchor3, div_6);
        },
        ($$anchor3) => {
          var div_7 = open($$anchor3, true, frag_22);
          var text_5 = child(div_7);
          text_effect(text_5, () => get(iLocale).weekdays[get(iLocale).weekStartsOn + unwrap(i) - 7]);
          close($$anchor3, div_7);
        }
      );
      close_frag($$anchor2, fragment);
    },
    null
  );
  each_indexed(
    node_1,
    () => Array(6),
    1,
    ($$anchor2, _, weekIndex) => {
      var div_8 = open($$anchor2, true, each_block_5);
      each_indexed(
        div_8,
        () => get(calendarDays).slice(unwrap(weekIndex) * 7, unwrap(weekIndex) * 7 + 7),
        9,
        ($$anchor3, calendarDay, $$index_5) => {
          var div_9 = open($$anchor3, true, each_block_6);
          var span = child(div_9);
          var text_6 = child(span);
          render_effect(() => {
            class_toggle(div_9, "disabled", !dayIsInRange(unwrap(calendarDay), min(), max()));
            class_toggle(div_9, "selected", value() && unwrap(calendarDay).year === value().getFullYear() && unwrap(calendarDay).month === value().getMonth() && unwrap(calendarDay).number === value().getDate());
            class_toggle(div_9, "today", unwrap(calendarDay).year === todayDate.getFullYear() && unwrap(calendarDay).month === todayDate.getMonth() && unwrap(calendarDay).number === todayDate.getDate());
            class_toggle(div_9, "other-month", unwrap(calendarDay).month !== get(browseMonth));
            text(text_6, unwrap(calendarDay).number);
          });
          event("click", div_9, () => selectDay(unwrap(calendarDay)), false);
          close($$anchor3, div_9);
        },
        null
      );
      close($$anchor2, div_8);
    },
    null
  );
  validate_component(TimePicker)(node_2, {
    get timePrecision() {
      return readonly(timePrecision());
    },
    get browseDate() {
      return readonly(get(browseDate));
    },
    browse
  });
  close($$anchor, div);
  pop();
  append_styles($$anchor, "svelte-168g93v", ".date-time-picker.svelte-168g93v.svelte-168g93v {\n  display: inline-block;\n  color: var(--date-picker-foreground, #000000);\n  background: var(--date-picker-background, #ffffff);\n  -moz-user-select: none;\n       user-select: none;\n  -webkit-user-select: none;\n  padding: 0.5rem;\n  cursor: default;\n  font-size: 0.75rem;\n  border: 1px solid rgba(103, 113, 137, 0.3);\n  border-radius: 3px;\n  box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.08), 0px 2px 6px rgba(0, 0, 0, 0.11);\n  outline: none;\n  transition: all 80ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n.date-time-picker.svelte-168g93v.svelte-168g93v:focus {\n  border-color: var(--date-picker-highlight-border, #0269f7);\n  box-shadow: 0px 0px 0px 2px var(--date-picker-highlight-shadow, rgba(2, 105, 247, 0.4));\n}\n\n.tab-container.svelte-168g93v.svelte-168g93v {\n  outline: none;\n}\n\n.top.svelte-168g93v.svelte-168g93v {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-bottom: 0.5rem;\n}\n\n.dropdown.svelte-168g93v.svelte-168g93v {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n  position: relative;\n  display: flex;\n}\n.dropdown.svelte-168g93v svg.svelte-168g93v {\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  height: 100%;\n  width: 8px;\n  padding: 0rem 0.5rem;\n  pointer-events: none;\n  box-sizing: content-box;\n}\n\n.month.svelte-168g93v.svelte-168g93v {\n  flex-grow: 1;\n}\n\n.year.svelte-168g93v.svelte-168g93v {\n  flex-grow: 1;\n}\n\nsvg.svelte-168g93v.svelte-168g93v {\n  display: block;\n  fill: var(--date-picker-foreground, #000000);\n  opacity: 0.75;\n  outline: none;\n}\n\n.page-button.svelte-168g93v.svelte-168g93v {\n  background-color: transparent;\n  width: 1.5rem;\n  height: 1.5rem;\n  flex-shrink: 0;\n  border-radius: 5px;\n  box-sizing: border-box;\n  border: 1px solid transparent;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.page-button.svelte-168g93v.svelte-168g93v:hover {\n  background-color: rgba(128, 128, 128, 0.08);\n  border: 1px solid rgba(128, 128, 128, 0.08);\n}\n.page-button.svelte-168g93v svg.svelte-168g93v {\n  width: 0.68rem;\n  height: 0.68rem;\n}\n\nselect.dummy-select.svelte-168g93v.svelte-168g93v {\n  position: absolute;\n  width: 100%;\n  pointer-events: none;\n  outline: none;\n  color: var(--date-picker-foreground, #000000);\n  background-color: var(--date-picker-background, #ffffff);\n  border-radius: 3px;\n}\n\nselect.svelte-168g93v:focus + select.dummy-select.svelte-168g93v {\n  border-color: var(--date-picker-highlight-border, #0269f7);\n  box-shadow: 0px 0px 0px 2px var(--date-picker-highlight-shadow, rgba(2, 105, 247, 0.4));\n}\n\nselect.svelte-168g93v.svelte-168g93v:not(.dummy-select) {\n  opacity: 0;\n}\n\nselect.svelte-168g93v.svelte-168g93v {\n  font-size: inherit;\n  font-family: inherit;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  flex-grow: 1;\n  padding: 0rem 0.35rem;\n  height: 1.5rem;\n  padding-right: 1.3rem;\n  margin: 0px;\n  border: 1px solid rgba(108, 120, 147, 0.3);\n  outline: none;\n  transition: all 80ms cubic-bezier(0.4, 0, 0.2, 1);\n  background-image: none;\n}\n\n.header.svelte-168g93v.svelte-168g93v {\n  display: flex;\n  font-weight: 600;\n  padding-bottom: 2px;\n}\n\n.header-cell.svelte-168g93v.svelte-168g93v {\n  width: 1.875rem;\n  text-align: center;\n  flex-grow: 1;\n}\n\n.week.svelte-168g93v.svelte-168g93v {\n  display: flex;\n}\n\n.cell.svelte-168g93v.svelte-168g93v {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 2rem;\n  height: 1.94rem;\n  flex-grow: 1;\n  border-radius: 5px;\n  box-sizing: border-box;\n  border: 2px solid transparent;\n}\n.cell.svelte-168g93v.svelte-168g93v:hover {\n  border: 1px solid rgba(128, 128, 128, 0.08);\n}\n.cell.today.svelte-168g93v.svelte-168g93v {\n  font-weight: 600;\n  border: 2px solid var(--date-picker-today-border, rgba(128, 128, 128, 0.3));\n}\n.cell.svelte-168g93v.svelte-168g93v:hover {\n  background-color: rgba(128, 128, 128, 0.08);\n}\n.cell.disabled.svelte-168g93v.svelte-168g93v {\n  visibility: hidden;\n}\n.cell.disabled.svelte-168g93v.svelte-168g93v:hover {\n  border: none;\n  background-color: transparent;\n}\n.cell.other-month.svelte-168g93v span.svelte-168g93v {\n  opacity: 0.4;\n}\n.cell.selected.svelte-168g93v.svelte-168g93v {\n  color: var(--date-picker-selected-color, inherit);\n  background: var(--date-picker-selected-background, rgba(2, 105, 247, 0.2));\n  border: 2px solid var(--date-picker-highlight-border, #0269f7);\n}\n");
}

// node_modules/date-picker-svelte/dist/parse.js
function parse(str, tokens, baseDate) {
  let missingPunctuation = "";
  let valid = true;
  baseDate = baseDate || new Date(2020, 0, 1, 0, 0, 0, 0);
  let year = baseDate.getFullYear();
  let month = baseDate.getMonth();
  let day = baseDate.getDate();
  let hours = baseDate.getHours();
  let minutes = baseDate.getMinutes();
  let seconds = baseDate.getSeconds();
  const ms = baseDate.getMilliseconds();
  function parseString(token) {
    for (let i = 0; i < token.length; i++) {
      if (str.startsWith(token[i])) {
        str = str.slice(1);
      } else {
        valid = false;
        if (str.length === 0)
          missingPunctuation = token.slice(i);
        return;
      }
    }
  }
  function parseUint(pattern, min, max) {
    const matches = str.match(pattern);
    if (matches == null ? void 0 : matches[0]) {
      str = str.slice(matches[0].length);
      const n = parseInt(matches[0]);
      if (n > max || n < min) {
        valid = false;
        return null;
      } else {
        return n;
      }
    } else {
      valid = false;
      return null;
    }
  }
  function parseToken(token) {
    if (typeof token === "string") {
      parseString(token);
    } else if (token.id === "yy") {
      const value = parseUint(/^[0-9]{2}/, 0, 99);
      if (value !== null)
        year = 2e3 + value;
    } else if (token.id === "yyyy") {
      const value = parseUint(/^[0-9]{4}/, 0, 9999);
      if (value !== null)
        year = value;
    } else if (token.id === "MM") {
      const value = parseUint(/^[0-9]{2}/, 1, 12);
      if (value !== null)
        month = value - 1;
    } else if (token.id === "dd") {
      const value = parseUint(/^[0-9]{2}/, 1, 31);
      if (value !== null)
        day = value;
    } else if (token.id === "HH") {
      const value = parseUint(/^[0-9]{2}/, 0, 23);
      if (value !== null)
        hours = value;
    } else if (token.id === "mm") {
      const value = parseUint(/^[0-9]{2}/, 0, 59);
      if (value !== null)
        minutes = value;
    } else if (token.id === "ss") {
      const value = parseUint(/^[0-9]{2}/, 0, 59);
      if (value !== null)
        seconds = value;
    }
  }
  for (const token of tokens) {
    parseToken(token);
    if (!valid)
      break;
  }
  const monthLength = getMonthLength(year, month);
  if (day > monthLength) {
    valid = false;
  }
  return {
    date: valid ? new Date(year, month, day, hours, minutes, seconds, ms) : null,
    missingPunctuation
  };
}
function twoDigit(value) {
  return ("0" + value.toString()).slice(-2);
}
var ruleTokens = [
  {
    id: "yyyy",
    toString: (d) => d.getFullYear().toString()
  },
  {
    id: "yy",
    toString: (d) => d.getFullYear().toString().slice(-2)
  },
  {
    id: "MM",
    toString: (d) => twoDigit(d.getMonth() + 1)
  },
  {
    id: "dd",
    toString: (d) => twoDigit(d.getDate())
  },
  {
    id: "HH",
    toString: (d) => twoDigit(d.getHours())
  },
  {
    id: "mm",
    toString: (d) => twoDigit(d.getMinutes())
  },
  {
    id: "ss",
    toString: (d) => twoDigit(d.getSeconds())
  }
];
function parseRule(s) {
  for (const token of ruleTokens) {
    if (s.startsWith(token.id)) {
      return token;
    }
  }
}
function createFormat(s) {
  const tokens = [];
  while (s.length > 0) {
    const token = parseRule(s);
    if (token) {
      tokens.push(token);
      s = s.slice(token.id.length);
    } else if (typeof tokens[tokens.length - 1] === "string") {
      tokens[tokens.length - 1] += s[0];
      s = s.slice(1);
    } else {
      tokens.push(s[0]);
      s = s.slice(1);
    }
  }
  return tokens;
}

// node_modules/date-picker-svelte/dist/DateInput.svelte
var frag_13 = template(`<div class="picker svelte-s93sqj"><!></div>`);
var frag2 = template(`<div><input type="text" class="svelte-s93sqj"> <!></div>`);
function DateInput($$anchor, $$props) {
  if (new.target === DateInput)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $innerStore = () => (validate_store(innerStore, "innerStore"), store_get(innerStore, "$innerStore", $$subscriptions));
  const $store = () => (validate_store(store, "store"), store_get(store, "$store", $$subscriptions));
  const dispatch = createEventDispatcher();
  const defaultDate = /* @__PURE__ */ new Date();
  const innerStore = writable(null);
  const store = (() => {
    return {
      subscribe: innerStore.subscribe,
      set: (date) => {
        var _a;
        if (date === null || date === void 0) {
          innerStore.set(null);
          value(date);
        } else if (date.getTime() !== ((_a = $innerStore()) == null ? void 0 : _a.getTime())) {
          innerStore.set(date);
          value(date);
        }
      }
    };
  })();
  let value = prop($$props, "value", 4, null);
  let min = prop($$props, "min", 8, () => new Date(defaultDate.getFullYear() - 20, 0, 1));
  let max = prop($$props, "max", 8, () => new Date(defaultDate.getFullYear(), 11, 31, 23, 59, 59, 999));
  let id = prop($$props, "id", 0, null);
  let placeholder = prop($$props, "placeholder", 0, "2020-12-31 23:00:00");
  let valid = prop($$props, "valid", 4, true);
  let disabled = prop($$props, "disabled", 0, false);
  let required = prop($$props, "required", 0, false);
  let classes = prop($$props, "class", 0, "");
  let format = prop($$props, "format", 0, "yyyy-MM-dd HH:mm:ss");
  let formatTokens = mutable_source(createFormat(format()));
  let locale = prop($$props, "locale", 8, () => ({}));
  function valueUpdate(value2, formatTokens2) {
    text2(toText(value2, formatTokens2));
  }
  let text2 = prop($$props, "text", 12, () => toText($store(), get(formatTokens)));
  function textUpdate(text22, formatTokens2) {
    if (text22.length) {
      const result = parse(text22, formatTokens2, $store());
      if (result.date !== null) {
        valid(true);
        store.set(result.date);
      } else {
        valid(false);
      }
    } else {
      valid(true);
      if (value()) {
        value(null);
        store.set(null);
      }
    }
  }
  let visible = prop($$props, "visible", 4, false);
  let closeOnSelection = prop($$props, "closeOnSelection", 0, false);
  let browseWithoutSelecting = prop($$props, "browseWithoutSelecting", 0, false);
  let timePrecision = prop($$props, "timePrecision", 0, null);
  function onFocusOut(e) {
    if ((e == null ? void 0 : e.currentTarget) instanceof HTMLElement && e.relatedTarget && e.relatedTarget instanceof Node && e.currentTarget.contains(e.relatedTarget)) {
      return;
    } else {
      visible(false);
    }
  }
  function keydown(e) {
    if (e.key === "Escape" && visible()) {
      visible(false);
      e.preventDefault();
      e.stopPropagation();
    } else if (e.key === "Enter") {
      visible(!visible());
      e.preventDefault();
    }
  }
  function onSelect(e) {
    dispatch("select", e.detail);
    if (closeOnSelection()) {
      visible(false);
    }
  }
  let dynamicPositioning = prop($$props, "dynamicPositioning", 0, false);
  let InputElement = mutable_source();
  let pickerElement = mutable_source();
  let showAbove = mutable_source(false);
  let pickerLeftPosition = mutable_source(null);
  function setDatePickerPosition() {
    set(showAbove, false);
    set(pickerLeftPosition, null);
    if (visible() && get(pickerElement) && dynamicPositioning()) {
      const inputRect = get(InputElement).getBoundingClientRect();
      const horizontalOverflow = get(pickerElement).offsetWidth - inputRect.width;
      const bottomThreshold = inputRect.bottom + get(pickerElement).offsetHeight + 5;
      const rightThreshold = inputRect.left + get(pickerElement).offsetWidth + 5;
      if (bottomThreshold > window.innerHeight) {
        set(showAbove, true);
      }
      if (rightThreshold > window.innerWidth) {
        set(pickerLeftPosition, -horizontalOverflow);
        if (inputRect.left < horizontalOverflow + 5) {
          const windowCenterPos = window.innerWidth / 2;
          const newPos = windowCenterPos - get(pickerElement).offsetWidth / 2;
          set(pickerLeftPosition, newPos - inputRect.left);
        }
      }
    }
  }
  function flyAutoPosition(node) {
    setDatePickerPosition();
    return fly(node, {
      duration: 200,
      easing: cubicInOut,
      y: get(showAbove) ? 5 : -5
    });
  }
  pre_effect(() => {
    value();
    untrack(() => {
      store.set(value());
    });
  });
  pre_effect(() => {
    format();
    untrack(() => {
      set(formatTokens, createFormat(format()));
    });
  });
  pre_effect(() => {
    $store(), get(formatTokens);
    untrack(() => {
      valueUpdate($store(), get(formatTokens));
    });
  });
  pre_effect(() => {
    text2(), get(formatTokens);
    untrack(() => {
      textUpdate(text2(), get(formatTokens));
    });
  });
  var div = open($$anchor, true, frag2);
  var input = child(div);
  bind_this(input, ($$value) => set(InputElement, $$value), InputElement);
  remove_input_attr_defaults(input);
  var node_1 = sibling(sibling(input, true));
  var input_value;
  var input_id;
  var input_placeholder;
  var input_disabled;
  var input_required;
  render_effect(() => {
    class_name(div, `date-time-field ${stringify(classes())} svelte-s93sqj`);
    if (input_value !== (input_value = text2())) {
      input.value = input_value;
    }
    if (input_id !== (input_id = id())) {
      attr(input, "id", input_id);
    }
    if (input_placeholder !== (input_placeholder = placeholder())) {
      attr(input, "placeholder", input_placeholder);
    }
    if (input_disabled !== (input_disabled = disabled())) {
      input.disabled = input_disabled;
    }
    if (input_required !== (input_required = required())) {
      input.required = input_required;
    }
    class_toggle(input, "invalid", !valid());
  });
  event("focusout", div, onFocusOut, false);
  event("keydown", div, keydown, false);
  event("focus", input, () => visible(true), false);
  event("mousedown", input, () => visible(true), false);
  event(
    "input",
    input,
    (e) => {
      if (e instanceof InputEvent && e.inputType === "insertText" && typeof e.data === "string" && e.currentTarget.value === text2() + e.data) {
        let result = parse(text2(), get(formatTokens), $store());
        if (result.missingPunctuation !== "" && !result.missingPunctuation.startsWith(e.data)) {
          text2(text2() + result.missingPunctuation + e.data);
          return;
        }
      }
      text2(e.currentTarget.value);
    },
    false
  );
  if_block(
    node_1,
    () => visible() && !disabled(),
    ($$anchor2) => {
      var div_1 = open($$anchor2, true, frag_13);
      transition(div_1, () => flyAutoPosition, null, false);
      bind_this(div_1, ($$value) => set(pickerElement, $$value), pickerElement);
      var node_2 = child(div_1);
      render_effect(() => {
        class_toggle(div_1, "visible", visible());
        class_toggle(div_1, "above", get(showAbove));
        style(div_1, "--picker-left-position", `${stringify(get(pickerLeftPosition))}px`);
      });
      validate_component(DatePicker)(node_2, {
        get value() {
          return $store();
        },
        set value($$value) {
          store_set(store, $$value);
        },
        get min() {
          return readonly(min());
        },
        get max() {
          return readonly(max());
        },
        get locale() {
          return readonly(locale());
        },
        get browseWithoutSelecting() {
          return readonly(browseWithoutSelecting());
        },
        get timePrecision() {
          return readonly(timePrecision());
        },
        $$events: { focusout: onFocusOut, select: onSelect }
      });
      close($$anchor2, div_1);
    },
    null
  );
  close($$anchor, div);
  pop();
  append_styles($$anchor, "svelte-s93sqj", ".date-time-field.svelte-s93sqj {\n  position: relative;\n}\n\ninput.svelte-s93sqj {\n  color: var(--date-picker-foreground, #000000);\n  background: var(--date-picker-background, #ffffff);\n  min-width: 0px;\n  box-sizing: border-box;\n  padding: 4px 6px;\n  margin: 0px;\n  border: 1px solid rgba(103, 113, 137, 0.3);\n  border-radius: 3px;\n  width: var(--date-input-width, 150px);\n  outline: none;\n  transition: all 80ms cubic-bezier(0.4, 0, 0.2, 1);\n}\ninput.svelte-s93sqj:focus {\n  border-color: var(--date-picker-highlight-border, #0269f7);\n  box-shadow: 0px 0px 0px 2px var(--date-picker-highlight-shadow, rgba(2, 105, 247, 0.4));\n}\ninput.svelte-s93sqj:disabled {\n  opacity: 0.5;\n}\n\n.invalid.svelte-s93sqj {\n  border: 1px solid rgba(249, 47, 114, 0.5);\n  background-color: rgba(249, 47, 114, 0.1);\n}\n.invalid.svelte-s93sqj:focus {\n  border-color: #f92f72;\n  box-shadow: 0px 0px 0px 2px rgba(249, 47, 114, 0.5);\n}\n\n.picker.svelte-s93sqj {\n  display: none;\n  position: absolute;\n  padding: 1px;\n  left: var(--picker-left-position);\n  z-index: 10;\n}\n.picker.above.svelte-s93sqj {\n  bottom: 100%;\n}\n.picker.visible.svelte-s93sqj {\n  display: block;\n}\n");
}
export {
  DateInput,
  DatePicker,
  localeFromDateFnsLocale
};
//# sourceMappingURL=date-picker-svelte.js.map
